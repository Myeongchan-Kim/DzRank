help(getwd)
a
getwd
getwd()
help(getwd)
help.start()
help(mean)
help("median")
example(mean)
?mean
help(package="ggplot2")
getwd()
getwd()
help(save.image)
searh()
search()
library("ggplot2")
Install.packages("ggplot2")
Install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
getwd()
setwd("/User/Paul/Rproj")
setwd("/User/Paul/Rproj")
data()
euro
lh
women
diamonds
crimtab
getwd
getwd()
setwd("/User/Paul/Rproj")
data1 = read.csv(url("http://stat.coumbia.edu/~rachel/datasets/hyt1.csv"))
data1 = read.csv(url("http://stat.columbia.edu/~rachel/datasets/hyt1.csv"))
data1 = read.csv(url("http://stat.columbia.edu/~rachel/datasets/nyt1.csv"))
data1
age_group = c("<18", "18-24", "25-34", "35-44", "45-54", "55-64", "65<")
head(data)
data1$age_cat
View(data1)
View(data1)
help(head)
head(data1)
help(cut)
age_border = c(-Inf, 18, 24, 34, 44, 54, 64, Inf)
help(cut)
test = c(1,2,3,4,5)
test_group = cut(test, c(-Inf, 3, Inf))
test_group
test_group$Levels
data1$age_cut = cut(data1$Age, age_border)
data1$age_cut
summary(data1)
help(rchisq)
install.packages("doBy")
library("doBy")
siterange = function(x){c(length(x), min(x0, mean(x), max(x)))}
isteragne(15)
siteragne(15)
siterange(1)
siterange = function(x){c(length(x), min(x), mean(x), max(x))}
siterange(1)
siterange(c(1,2,3))
siterange(data1)
siterange(data1$Age)
summaryBy(Gender+Signed_In + Impressions + clicks~agecut, data = data1)
summaryBy(Gender+Signed_In + Impressions + Clicks~agecut, data = data1)
help("summaryBy")
summaryBy(Gender+Signed_In+Impressions+Clicks~agecut, data = data1)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecut, data = data1, FUN=siterange)
summaryBy(Age~agecat, data = data1, FUN = siterange)
summaryBy(Age~agecut, data = data1, FUN = siterange)
summaryBy(Age~age_cut, data = data1, FUN = siterange)
summaryBy(Gender+Signed_In+Impressions+Clicks~age_cut, data = data1, FUN=siterange)
help("summaryBy")
getwd()
getwd();
setwd('~/DzRank/Rproj')
rm(list = ls())
data = read.csv("Influenza_JAN_BABY.csv"); # from 2016, Nov
data = read.csv("Influenza_JAN_BABY.csv"); # from 2016, Nov
View(data)
data = data[ , !(names(data) == 'X')]
summary(data)
data$hash_id = as.character(data$hash_id)
data$date = as.character(data$date)
data$date = as.POSIXct(data$date)
summary(data$date)
summary(data$loc_1)
summary(data$address_2)
## Make dzNum
finDzNum = function(string){
if(nchar(string) > 10){
x = strsplit(string, split = "_")[[1]]
index = match("1", x) - 1
return(index)
}
else
return(string)
}
data$dz_raw = as.character(data$dz_raw)
data$dzNum = sapply(X = data$dz_raw, FUN = finDzNum )
sum(is.na(data$dzNum))  # not
class(data$dzNum)
class(data$dzNum)
class(data$dzNum)
sum(is.na(data$dzNum))  # not
data$dzNum[is.na(data$dzNum)] = 22
sum((data$dzNum == 22))
sum(data$dzNum == 21)
data$dzNum = factor(data$dzNum)
table(data$dzNum)
class(data$loc_1)
data$loc_1 = as.character(data$loc_1)
data$loc_2 = as.character(data$loc_2)
data$longitude = as.numeric(data$loc_2)
data$latitude = as.numeric(data$loc_1)
summary(data$longitude)
data[is.na(data$longitude),]
sum(is.na(data$longitude))
library('ggmap')
for(i in c(1:dim(data)[1])){
if( is.na(data[i,]$longitude )) {
result = geocode(data[i,]$loc_2)
data[i,]$latitude = result$lat
data[i,]$longitude = result$lon
}
}
write.csv(data, file="Influenz_full_Nov_JAN.csv")
data_tmp = data;
data = read.csv("Influenz_full_Nov_JAN.csv")
data = data[ , !(names(data) == 'X')]
which(is.na(data$longitude))
which(is.na(data$longitude))
data$born_to_day[data$born_to_day == NULL]
head(data)
data$born_to_day = as.character(data$born_to_day)
data$born_to_day = as.numeric(data$born_to_day)
data = data[which(data$born_to_day > 10),]
bornMean = mean(data$born_to_day, na.rm = TRUE)
data$born_to_day[is.na(data$born_to_day)] = bornMean
data$born_to_day[is.na(data$born_to_day)]
summary(data$born_to_day)
data$born_to_day[data$born_to_day > 1500]
data$born_to_day[data$born_to_day > 2000]
data$born_to_day[data$born_to_day > 10000]
data$born_to_day[data$born_to_day > 20000]
data$born_to_day[data$born_to_day > 10000]
10000/365
data$born_to_day[data$born_to_day > 365 * 20]
data$born_to_day[data$born_to_day > 365 * 10]
data$born_to_day[data$born_to_day > 365 * 13]
data$born_to_day[data$born_to_day > 365 * 12]
data = data[which(data$born_to_day < 365 * 12),]
bornMean = mean(data$born_to_day, na.rm = TRUE)
data$born_to_day[is.na(data$born_to_day)]
summary(data$born_to_day)
data$born_to_day[data$born_to_day > 365 * 12]
data$born_to_day[data$born_to_day > 365 * 12 || data$born_to_day < 10]
data$weight = as.character(data$weight)
data$weight = as.numeric(data$weight)
summary(data$weight)
meanWeight = mean(data$weight, na.rm = TRUE)
data$weight[is.na(data$weight)] = meanWeight
data[data$Weieght > 1000]
data$weight[data$weieght > 1000]
data$weight[data$weieght > 100]
data$weight[data$weieght > 10]
data[data$weieght > 10]
summary(data$weight)
data$weieght > 10
summary(data$weight)
data$weight
data$weight[data$weight > 100]
data[data$weight > 100]
data[:,data$weight > 100]
data[,data$weight > 100]
data[:,data$weight > 100]
data$born_to_day[data$weight > 100]
data[data$weight > 100]
data[1:5,data$weight > 100]
data[:,][data$weight > 100]
data[which(data$weight > 100),]
data = data[which(data$weight < 100),]
meanWeight = mean(data$weight, na.rm = TRUE)
data$weight[is.na(data$weight)] = meanWeight
summary(data$gender)
data$gender = as.character(data$gender)
data$gender = as.numeric(data$gender)
data$gender = as.factor(data$gender)
which(is.na(data$longitude))
which(is.na(data$latitude))
write.csv(data, 'Influenza_fill_na.csv')
head(data[,c(1, 5,8,9,10,11,12,13,14,15)])
df = data[,c(1, 5,8,9,10,11,12,13,14,15)]
class(df$date)
df$date = as.character(df$date)
df$date = as.Date(df$date)
attach(df)
df = df[order(date),]
detach(df);
head(df, 50)
sum(is.na(df$latitude))
sum(df$latitude > 39) # 이북
sum(df$latitude < 33) # 마라도 북위 33
sum(df$longitude > 133) # 독도 동경132
sum(df$longitude < 125) # 백령도
df = df[which(df$latitude < 39),]
df = df[which(df$latitude > 33),]
df = df[which(df$longitude < 133),]
df = df[which(df$longitude > 125),]
sum(df$latitude > 39) # 이북
sum(df$latitude < 33) # 마라도 북위 33
sum(df$longitude > 133) # 독도 동경132
sum(df$longitude < 125) # 백령도
sum(is.na(df$longitude))
class(df$born_to_day)
head(df)
df[which(df$born_to_day > 10),]
df[which(df$born_to_day <= 10),]
write.csv(df, 'ford3.csv')
summary(df$longitude)
summary(df$latitude)
# install.packages("gdata")
require(gdata)
# install.packages("XML")
# install.packages("rjson")
# install.packages("RgoogleMaps")
# geoplot이 CRAN에 없어서 다운로드 했음
# install.packages("geoPlot_2.3.tar.gz", repos = NULL, type="source")
require(geoPlot)
result = df[,c(1,8,10,9)]
head(result)
geoPlot(result, zoom = 7, color= result$dzNum)
?geoPlot
Influenza = result[which(df$dzNum == 7),]
Influenza
geoPlot(Influenza, zoom = 7, color = Influenza$dzNum)
result$bigLat = round(result$latitude * 10) / 10
result$bigLon = round(result$longitude * 10) / 10
result$bigLat = factor(result$bigLat)
result$bigLon = factor(result$bigLon)
summary(result$longitude)
summary(result$latitude)
summary(result$bigLon)
summary(result$bigLat)
write.csv(data, file = "influenzaResult.csv")
?write.csv
filteredData = result
write.csv(filteredData, file= "filteredDzinfo.csv")
head(filteredData)
filteredData$newFac <- with(filteredData, interaction(bigLat,  bigLon))
head(filteredData)
class(filteredData$newFac)
summary(filteredData$newFac)
geoPlot(filteredData[,c(1, 2,3,4)], zoom = 7, color = filteredData$dzNum)
tmpResult = filteredData[filteredData$bigLat == 37.5 & filteredData$bigLon == 126.9,]
dim(tmpResult)
summary(tmpResult)
summary(tmpResult$dzNum)
ratio =  dim(tmpResult[tmpResult$dzNum == 7,])[1] / dim(tmpResult)[1]
ratio
require("doBy")
head(filteredData)
class(filteredData$dzNum)
filteredData$dzNum = as.character(filteredData$dzNum)
filteredData$dzNum = as.numeric(filteredData$dzNum)
filteredData$dzNum = as.factor(filteredData$dzNum)
head(filteredData)
summary(filteredData$dzNum)
getRatio = function(x){
sum(x == 7) / sum( x > -1) * 100
}
result = summaryBy(dzNum ~ bigLon + bigLat, data = filteredData, FUN= getRatio)
result
class(result)
names(result)  = c("longitude", "latitude", "ratio")
summary(result)
mapResult = cbind(1, result)
summary(mapResult)
mapResult = mapResult[c(1,4,3,2)]
mapResult$longitude = as.numeric(as.character(mapResult$longitude))
mapResult$latitude = as.numeric(as.character(mapResult$latitude))
mapResult$intensity = mapResult$ratio * 7
mapResult$intensity[mapResult$intensity > 255 ] = 255
summary(mapResult)
geoPlot(mapResult, zoom = 7, color = rgb(mapResult$intensity / 255 , (1 - mapResult$intensity / 255) / 1.5,0,1))
